/*
Payout Service_test

Testing PayoutApiService

*/

// Code generated by OpenAPI Generator

package xendit

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	xendit "github.com/xendit/xendit-go/v3"
)

func Test_xendit_PayoutApiService(t *testing.T) {

	apiKey := os.Getenv("XND_APIKEY")
	if apiKey == "" {
		t.Skip("XND_APIKEY not set")
	}
	
	apiClient := xendit.NewClient(apiKey)

	t.Run("Test PayoutApiService CancelPayout", func(t *testing.T) {

		var id string

		resp, httpRes, err := apiClient.PayoutApi.CancelPayout(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayoutApiService CreatePayout", func(t *testing.T) {

		resp, httpRes, err := apiClient.PayoutApi.CreatePayout(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayoutApiService GetPayoutById", func(t *testing.T) {

		var id string

		resp, httpRes, err := apiClient.PayoutApi.GetPayoutById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayoutApiService GetPayoutChannels", func(t *testing.T) {

		resp, httpRes, err := apiClient.PayoutApi.GetPayoutChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayoutApiService GetPayouts", func(t *testing.T) {

		resp, httpRes, err := apiClient.PayoutApi.GetPayouts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
