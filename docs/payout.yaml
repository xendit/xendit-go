openapi: 3.0.0
info:
  contact:
    email: help@xendit.co
  description: "This API allows Xendit to send money from an account to a channel\
    \ (banks, eWallets, retail outlets) from across regions"
  license:
    name: UNLICENSED
    url: https://xendit.co/en/terms-and-conditions/
  termsOfService: https://xendit.co/en/terms-and-conditions/
  title: Payout Service
  version: 1.0.0
externalDocs:
  description: Find out more
  url: https://developers.xendit.co/api-reference/#payouts
servers:
- description: Xendit API Server
  url: https://api.xendit.co
paths:
  /v2/payouts:
    get:
      operationId: getPayouts
      parameters:
      - description: Reference_id provided when creating the payout
        explode: true
        in: query
        name: reference_id
        required: true
        schema:
          example: DISB-123
          type: string
        style: form
      - description: Number of records to fetch per API call
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 10
          type: number
        style: form
      - description: Used to fetch record after this payout unique id
        explode: true
        in: query
        name: after_id
        required: false
        schema:
          example: disb-7baa7335-a0b2-4678-bb8c-318c0167f332
          type: string
        style: form
      - description: Used to fetch record before this payout unique id
        explode: true
        in: query
        name: before_id
        required: false
        schema:
          example: disb-7baa7335-a0b2-4678-bb8c-318c0167f332
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                With matching payouts:
                  value:
                    data:
                    - id: disb-5594002a-d0a0-4cd9-b3f7-f5992abc8e48
                      reference_id: DISB-001
                      channel_code: PH_BDO
                      channel_properties:
                        account_holder_name: John Doe
                        account_number: "000000"
                      description: FX1234
                      currency: PHP
                      amount: 15000.05
                      receipt_notification:
                        email_to:
                        - user_to@example.com
                        - user_to2@example.com
                        - user_to3@example.com
                        email_cc:
                        - user_cc@example.com
                        - user_cc2@example.com
                        email_bcc:
                        - user_bcc@example.com
                      metadata:
                        external_party: xendit
                      created: 2019-11-01T12:34:56.007Z
                      updated: 2019-11-01T12:34:56.007Z
                      business_id: 5dbf20d7c8eb0c0896f811b6
                      status: ACCEPTED
                      estimated_arrival_time: 2019-11-01T12:34:56.007Z
                    has_more: false
              schema:
                $ref: '#/components/schemas/getPayouts_200_response'
          description: An array of Payout objects sorted by created time in desc order.
            "data" will be an empty array and "has_more' will be equal to false when
            there are no matching data.
        "403":
          content:
            application/json:
              example:
                error_code: REQUEST_FORBIDDEN_ERROR
                message: The API key is forbidden to perform this request.
              schema:
                $ref: '#/components/schemas/Error'
          description: API key in use does not have necessary permissions to perform
            the request. Please assign proper permissions for the key.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Errors
      summary: API to retrieve all matching payouts with reference ID
      tags:
      - payout
    post:
      operationId: createPayout
      parameters:
      - description: A unique key to prevent duplicate requests from pushing through
          our system. No expiration.
        explode: false
        in: header
        name: idempotency-key
        required: true
        schema:
          example: DISB-1234
          type: string
        style: simple
      - description: The sub-account user-id that you want to make this transaction
          for. This header is only used if you have access to xenPlatform. See xenPlatform
          for more information.
        explode: false
        in: header
        name: for-user-id
        required: false
        schema:
          example: 5dbf20d7c8eb0c0896f811b6
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Bank or EWallet Payout:
                value:
                  reference_id: DISB-001
                  currency: PHP
                  channel_code: PH_BDO
                  channel_properties:
                    account_holder_name: John Doe
                    account_number: "000000"
                  amount: 90000
                  description: Test Bank Payout
                  type: DIRECT_DISBURSEMENT
            schema:
              $ref: '#/components/schemas/CreatePayoutRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                Successfully created payout:
                  value:
                    id: disb-5594002a-d0a0-4cd9-b3f7-f5992abc8e48
                    reference_id: DISB-001
                    channel_code: PH_BDO
                    channel_properties:
                      account_holder_name: John Doe
                      account_number: "000000"
                    description: FX1234
                    currency: PHP
                    amount: 15000.05
                    receipt_notification:
                      email_to:
                      - user_to@example.com
                      - user_to2@example.com
                      - user_to3@example.com
                      email_cc:
                      - user_cc@example.com
                      - user_cc2@example.com
                      email_bcc:
                      - user_bcc@example.com
                    metadata:
                      external_party: xendit
                    created: 2019-11-01T12:34:56.007Z
                    updated: 2019-11-01T12:34:56.007Z
                    business_id: 5dbf20d7c8eb0c0896f811b6
                    status: ACCEPTED
                    estimated_arrival_time: 2019-11-01T12:34:56.007Z
              schema:
                $ref: '#/components/schemas/getPayouts_200_response_data_inner'
          description: Created payout
        "400":
          content:
            application/json:
              examples:
                Missing parameters or invalid headers:
                  value:
                    error_code: API_VALIDATION_ERROR
                    message: Should have required property "xxx"
                Amount has more than 2 decimal places:
                  value:
                    error_code: API_VALIDATION_ERROR
                    message: '"amount" should have 2 decimal places or less'
                Channel code not supported yet:
                  value:
                    error_code: CHANNEL_CODE_NOT_SUPPORTED
                    message: “channel_code” is not supported. See list of supported
                      channel codes at /payouts_channels.
                Minimum transfer limit error per channel:
                  value:
                    error_code: MINIMUM_TRANSFER_LIMIT_ERROR
                    message: “amount” is under the minimum amount supported for the
                      channel. See amount limitations at the URL below.
                Maximum transfer limit error per channel:
                  value:
                    error_code: MAXIMUM_TRANSFER_LIMIT_ERROR
                    message: “amount” is more than the maximum amount supported for
                      the channel. See amount limitations at the URL below.
                Amount Increment Not Supported:
                  value:
                    error_code: AMOUNT_INCREMENT_NOT_SUPPORTED
                    message: amount” needs to be a multiple of the minimum increment
                      supported by the channel.
              schema:
                $ref: '#/components/schemas/Error'
          description: "Error when creating payout, see error_code for more details"
        "401":
          content:
            application/json:
              example:
                error_code: INVALID_API_KEY
                message: API key format is invalid.
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid API key
        "403":
          content:
            application/json:
              example:
                error_code: REQUEST_FORBIDDEN_ERROR
                message: The API key is forbidden to perform this request.
              schema:
                $ref: '#/components/schemas/Error'
          description: API key in use does not have necessary permissions to perform
            the request. Please assign proper permissions for the key.
        "409":
          content:
            application/json:
              example:
                error_code: DUPLICATE_ERROR
                message: "A payout with this idempotency key already exists. If you\
                  \ meant to execute a different request, please use another idempotency\
                  \ key."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Duplicate Error, payout already exists"
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Errors
      summary: API to send money at scale to bank accounts & eWallets
      tags:
      - payout
  /v2/payouts/{id}:
    get:
      operationId: getPayoutById
      parameters:
      - description: Payout id returned from the response of /v2/payouts
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: disb-7baa7335-a0b2-4678-bb8c-318c0167f332
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                With matching payout:
                  value:
                    id: disb-7baa7335-a0b2-4678-bb8c-318c0167f332
                    reference_id: DISB-001
                    channel_code: PH_BDO
                    channel_properties:
                      account_holder_name: John Doe
                      account_number: "000000"
                    description: FX1234
                    currency: PHP
                    amount: 15000.05
                    receipt_notification:
                      email_to:
                      - user_to@example.com
                      - user_to2@example.com
                      - user_to3@example.com
                      email_cc:
                      - user_cc@example.com
                      - user_cc2@example.com
                      email_bcc:
                      - user_bcc@example.com
                    metadata:
                      external_party: xendit
                    created: 2019-11-01T12:34:56.007Z
                    updated: 2019-11-01T12:34:56.007Z
                    business_id: 5dbf20d7c8eb0c0896f811b6
                    status: ACCEPTED
                    estimated_arrival_time: 2019-11-01T12:34:56.007Z
              schema:
                $ref: '#/components/schemas/getPayouts_200_response_data_inner'
          description: The Payout object
        "401":
          content:
            application/json:
              example:
                error_code: INVALID_API_KEY
                message: API key format is invalid.
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid API key
        "403":
          content:
            application/json:
              example:
                error_code: REQUEST_FORBIDDEN_ERROR
                message: The API key is forbidden to perform this request.
              schema:
                $ref: '#/components/schemas/Error'
          description: API key in use does not have necessary permissions to perform
            the request. Please assign proper permissions for the key.
        "404":
          content:
            application/json:
              example:
                error_code: DATA_NOT_FOUND
                message: Could not find payout with the corresponding ID. Please try
                  again with a valid ID.
              schema:
                $ref: '#/components/schemas/Error'
          description: Payout Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Errors
      summary: "API to fetch the current status, or details of the payout"
      tags:
      - payout
  /payouts_channels:
    get:
      operationId: getPayoutChannels
      parameters:
      - description: Filter channels by currency from ISO-4217 values
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: "IDR, PHP"
          type: string
        style: form
      - allowReserved: true
        description: Filter channels by category
        explode: false
        in: query
        name: channel_category
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ChannelCategory'
          type: array
        style: form
      - description: "Filter channels by channel code, prefixed by ISO-3166 country\
          \ code"
        explode: true
        in: query
        name: channel_code
        required: false
        schema:
          example: "ID_MANDIRI, PH_GCASH"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - channel_code: ID_MANDIRI
                  channel_category: BANK
                  currency: IDR
                  name: Bank Mandiri
                  amount_limits:
                    minimum: "1,"
                    maximum: "5000000,"
                    minimum_increment: 1
                - channel_code: PH_GCASH
                  channel_category: BANK
                  currency: PHP
                  name: GCASH
                  amount_limits:
                    minimum: "1,"
                    maximum: "50000,"
                    minimum_increment: 0.01
                items:
                  $ref: '#/components/schemas/Channel'
                type: array
          description: Current list of banks and e-wallets supported for payouts for
            all regions
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Errors
      summary: API providing the current list of banks and e-wallets we support for
        payouts for both regions
      tags:
      - payout
  /v2/payouts/{id}/cancel:
    post:
      operationId: cancelPayout
      parameters:
      - description: Payout id returned from the response of /v2/payouts
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: disb-7baa7335-a0b2-4678-bb8c-318c0167f332
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                For API Gateway:
                  value:
                    id: disb-7baa7335-a0b2-4678-bb8c-318c0167f332
                    reference_id: DISB-001
                    channel_code: PH_BDO
                    channel_properties:
                      account_holder_name: John Doe
                      account_number: "000000"
                    description: FX1234
                    currency: PHP
                    amount: 15000.05
                    receipt_notification:
                      email_to:
                      - user_to@example.com
                      - user_to2@example.com
                      - user_to3@example.com
                      email_cc:
                      - user_cc@example.com
                      - user_cc2@example.com
                      email_bcc:
                      - user_bcc@example.com
                    metadata:
                      external_party: xendit
                    created: 2019-11-01T12:34:56.007Z
                    updated: 2019-11-01T12:34:56.007Z
                    business_id: 5dbf20d7c8eb0c0896f811b6
                    status: CANCELLED
              schema:
                $ref: '#/components/schemas/getPayouts_200_response_data_inner'
          description: Cancelled Successfully
        "400":
          content:
            application/json:
              example:
                error_code: CANCELLATION_NOT_ALLOWED
                message: Payout cannot be canceled because it has already been processed
                  by Xendit.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unable to Cancel
        "404":
          content:
            application/json:
              example:
                error_code: DATA_NOT_FOUND
                message: Could not find payout with the corresponding ID. Please try
                  again with a valid ID
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid Payout ID
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Errors
      summary: API to cancel requested payouts that have not yet been sent to partner
        banks and e-wallets. Cancellation is possible if the payout has not been sent
        out via our partner and when payout status is ACCEPTED.
      tags:
      - payout
components:
  schemas:
    ReceiptNotification:
      description: Additional notification for completed payout
      example:
        email_to:
        - user_to@example.com
        - user_to2@example.com
        - user_to3@example.com
        email_bcc:
        - user_bcc@example.com
        email_cc:
        - user_cc@example.com
        - user_cc2@example.com
      properties:
        email_to:
          description: Valid email address to send the payout receipt
          example:
          - user_to@example.com
          - user_to2@example.com
          - user_to3@example.com
          items:
            format: email
            maxItems: 3
            type: string
          nullable: true
          type: array
        email_cc:
          description: Valid email address to cc the payout receipt
          example:
          - user_cc@example.com
          - user_cc2@example.com
          items:
            format: email
            maxItems: 3
            type: string
          nullable: true
          type: array
        email_bcc:
          description: Valid email address to bcc the payout receipt
          example:
          - user_bcc@example.com
          items:
            format: email
            maxItems: 3
            type: string
          nullable: true
          type: array
      type: object
    Error:
      properties:
        error_code:
          description: "Specific error encountered when processing the request, can\
            \ refer to the API documentation on proper handling of each available\
            \ error code https://developers.xendit.co/api-reference/#payouts"
          example: SERVER_ERROR
          type: string
        message:
          description: Human readable error message
          type: string
        errors:
          items:
            $ref: '#/components/schemas/Error_errors_inner'
          type: array
      required:
      - error_code
      - message
      type: object
    ChannelAccountType:
      description: Available account types (applicable for MY_DUITNOW)
      enum:
      - NATIONAL_ID
      - MOBILE_NO
      - PASSPORT
      - BUSINESS_REGISTRATION
      - BANK_ACCOUNT
      type: string
    ChannelCategory:
      description: "Category of channel code, as some channels might require more\
        \ fields during processing"
      enum:
      - BANK
      - EWALLET
      - OTC
      example: BANK
      type: string
    Channel:
      description: Channel information where you can send the money to
      properties:
        channel_code:
          description: "Destination channel to send the money to, prefixed by ISO-3166\
            \ country code"
          example: ID_MANDIRI
          type: string
        channel_category:
          $ref: '#/components/schemas/ChannelCategory'
        currency:
          description: Currency of the destination channel using ISO-4217 currency
            code
          example: IDR
          type: string
        channel_name:
          description: Name of the destination channel
          example: Bank Mandiri
          type: string
        amount_limits:
          $ref: '#/components/schemas/Channel_amount_limits'
      required:
      - amount_limits
      - channel_category
      - channel_code
      - channel_name
      - currency
      type: object
    DigitalPayoutChannelProperties:
      description: "Channel information for digital destinations (banks, e-wallets)"
      example:
        account_number: "9999999999"
        account_type: null
        account_holder_name: Adam Gilcrist
      properties:
        account_holder_name:
          description: Registered account name
          example: Adam Gilcrist
          nullable: true
          type: string
        account_number:
          description: Registered account number
          example: "9999999999"
          type: string
        account_type:
          $ref: '#/components/schemas/ChannelAccountType'
      required:
      - account_number
      type: object
    CreatePayoutRequest:
      description: Information needed by Xendit to send money to the destination channel
        provided
      example:
        amount: 15000.05
        metadata:
          external_party: xendit
        reference_id: DISB-001
        receipt_notification:
          email_to:
          - user_to@example.com
          - user_to2@example.com
          - user_to3@example.com
          email_bcc:
          - user_bcc@example.com
          email_cc:
          - user_cc@example.com
          - user_cc2@example.com
        description: Cashback 2020
        channel_properties:
          account_number: "9999999999"
          account_type: null
          account_holder_name: Adam Gilcrist
        currency: PHP
        channel_code: PH_BDO
      properties:
        reference_id:
          description: A client defined payout identifier
          example: DISB-001
          minLength: 1
          type: string
        channel_code:
          description: Channel code of selected destination bank or e-wallet
          example: PH_BDO
          type: string
        channel_properties:
          $ref: '#/components/schemas/DigitalPayoutChannelProperties'
        amount:
          description: Amount to be sent to the destination account and should be
            a multiple of the minimum increment for the selected channel
          example: 15000.05
          type: number
        description:
          description: "Description to send with the payout, the recipient may see\
            \ this e.g., in their bank statement (if supported) or in email receipts\
            \ we send on your behalf"
          example: Cashback 2020
          type: string
        currency:
          description: Currency of the destination channel using ISO-4217 currency
            code
          example: PHP
          type: string
        receipt_notification:
          $ref: '#/components/schemas/ReceiptNotification'
        metadata:
          description: Object of additional information you may use
          example:
            external_party: xendit
          type: object
      required:
      - amount
      - channel_code
      - channel_properties
      - currency
      - reference_id
      type: object
    Payout:
      allOf:
      - $ref: '#/components/schemas/CreatePayoutRequest'
      - $ref: '#/components/schemas/Payout_allOf'
    getPayouts_200_response_data_inner:
      anyOf:
      - $ref: '#/components/schemas/Payout'
    getPayouts_200_response_links:
      example:
        method: method
        rel: rel
        href: href
      properties:
        href:
          type: string
        rel:
          type: string
        method:
          type: string
      type: object
    getPayouts_200_response:
      example:
        data:
        - null
        - null
        links:
          method: method
          rel: rel
          href: href
        has_more: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/getPayouts_200_response_data_inner'
          type: array
        has_more:
          type: boolean
        links:
          $ref: '#/components/schemas/getPayouts_200_response_links'
      type: object
    Error_errors_inner:
      properties:
        path:
          description: Precise location of the error
          type: string
        message:
          description: Specific description of the error
          type: string
      required:
      - message
      - path
      type: object
    Channel_amount_limits:
      description: Supported amount ranges for payouts to this channel
      properties:
        minimum:
          description: Lowest amount supported for a payout to this channel
          example: 1
          type: number
        maximum:
          description: Highest amount supported for a payout to this channel
          example: 50000000
          type: number
        minimum_increment:
          description: Supported increments
          example: 1
          type: number
      required:
      - maximum
      - minimum
      - minimum_increment
      type: object
    Payout_allOf:
      properties:
        id:
          description: Xendit-generated unique identifier for each payout
          example: disb_4203234e-48f5-11eb-b378-0242ac130002
          type: string
        created:
          description: "The time payout was created on Xendit's system, in ISO 8601\
            \ format"
          example: 2019-11-01T12:34:56.007Z
          format: date-time
          type: string
        updated:
          description: "The time payout was last updated on Xendit's system, in ISO\
            \ 8601 format"
          example: 2019-11-01T12:34:56.007Z
          format: date-time
          type: string
        business_id:
          description: Xendit Business ID
          example: 4203234e-48f5-11eb-b378-0242ac130002
          type: string
        status:
          description: Status of payout
          enum:
          - SUCCEEDED
          - FAILED
          - ACCEPTED
          - REQUESTED
          - LOCKED
          - CANCELLED
          - REVERSED
          example: ACCEPTED
          type: string
        failure_code:
          description: "If the Payout failed, we include a failure code for more details\
            \ on the failure."
          enum:
          - INSUFFICIENT_BALANCE
          - REJECTED_BY_CHANNEL
          - TEMPORARY_TRANSFER_ERROR
          - INVALID_DESTINATION
          - TRANSFER_ERROR
          type: string
        estimated_arrival_time:
          description: Our estimated time on to when your payout is reflected to the
            destination account
          format: date-time
          type: string
      required:
      - business_id
      - created
      - id
      - status
      - updated
      type: object
      example: null
