openapi: 3.0.0
info:
  contact:
    email: email@xendit.com
  description: "# Introduction\nThis specification describes how to use the Transaction\
    \ Service V4 API. \n\n**Transaction Service** is the service that records the\
    \ customer transactions and is responsible to calculate their balance.  All products\
    \ that move customer money around whether it is money-in, money-out, or transfer\
    \ will interact with the Transaction Service on its flow. Transaction Service\
    \ is the source of truth of Xendit and Customer regarding how much money that\
    \ customer has that is stored in Xendit. Transaction Service is the source that\
    \ is used for both our internal and customer financial reconciliation. Internally,\
    \ the Transaction Service data structure is similar to how double-entry accounting\
    \ works.\n\n## How Xendit teams/services do integrate with Transaction Service\
    \ V4\n\n\n**Channel product team/service** They interact with the Transaction\
    \ Service when they want to record the transactions. This transaction can be money-in\
    \ (balance added), money-out (balance deducted), transfer, refund/void/reversal,\
    \ or other kind of transaction that affects customer balance. Product team also\
    \ interacts with the Transaction Service for getting information about the transaction\
    \ or balance.\n\n**Billing/Fee team/service** They interact with Transaction Service\
    \ either as the dependency of Transaction Service for getting the correct fee\
    \ calculation/settings. Or using Transaction Service for getting the transaction/fee\
    \ information to calculate the bill for the customer.\n\n**NUX team/service**\
    \ They interact with the Transaction Service to set up the customer ledger_account\
    \ that is used to record their transactions.\n\n**Finance team/service** They\
    \ interact with the Transaction Service to get the transaction and balance data\
    \ for each customer to do reconciliation.\n\n**Dashboard/API team/service** They\
    \ interact with the Transaction Service as a proxy to show the data to the Customer.\n\
    \n## Prerequisites\n\nBefore staring to use **Transaction Service API** you need\
    \ to complete a few things:\n1. Find out **Base URL** for the API. Every endpoint\
    \ definition in this document contains list of available servers (local, staging,\
    \ production)\n2. Set up ledger accounts using business id and currency. **Ledger\
    \ Account** represents the account of the customer that will be used to associate\
    \ with ledger lines. Each business may have at least 1 ledger account group (a\
    \ group consists of a few accounts of types such as cash, liability, holding),\
    \ and the money movement of their ledger will revolve around those ledger accounts.\
    \ **Ledger Lines** that show a debit or credit transaction for a ledger account.\
    \ We’re using the double-entry principle in accounting where we should post 2\
    \ lines every time we make a transaction, 1 to debit an account and 1 to credit\
    \ another account. See how to call <a href=\"#operation/setupLedgerAccounts\"\
    >Create cash, liability, holding, and tax account for a business (api/ledger-accounts/setup)</a>\
    \ section of this document\n3. To be able to create payments with fee/VAT the\
    \ Product rate settings and VAT rate settings should be created using Transaction\
    \ Fee Service. See <a href=\"https://docs.google.com/document/d/1HrrA4GhWD1DaJS5dn0dh9VyMhLR6TOUMW1qhRUZ9d_k/edit?pli=1#heading=h.518me3lwf8rb\"\
    >Fee Service Documentation</a> for details about how to create Product/VAT rate\
    \ settings.\n\n\n## Transaction flows\n\nTo integrate with the Transaction Service\
    \ you should decide what types of transaction flows your integration will be using.\
    \ Transaction flow is set by the transaction `type` during transaction creation\n\
    \n1. Money In flows\n    1. Payment from credit card\n\n\n        `type: CREDIT_CARD_PAYMENT`\n\
    \t\t\n\t\t\n    3. Payment from other sources without fee/VAT\n\n\n        `type:\
    \ DEPOSIT, FOREX_DEPOSIT, ISSUING_FUNDING_REFUND, BNPL_PARTNER_SETTLEMENT_CREDIT,\
    \ PROMO_FEE_CASHBACK, PROMO_VAT_CASHBACK, BATCH_VA_PAYMENT`\n\t\t\n\t\t\n    4.\
    \ Payment from other sources with fee/VAT\n\n\n        `type: VA_PAYMENT, IM_ESCROW_VA_PAYMENT,\
    \ IM_DEPOSIT, RO_PAYMENT, EWALLET_PAYMENT, CARDLESS_CREDIT_PAYMENT, IM_REMITTANCE_VA_PAYMENT,\
    \ PAYLATER_PAYMENT, INVOICE, QR_CODE_PAYMENT, DIRECT_DEBIT_PAYMENT, DIRECT_BANK_TRANSFER,\
    \ ACH_PAYMENT, CRYPTO_PAYMENT`\n\t\t\n\t\t\n    5. Billing deposit from cash\n\
    \n\n        `type: BILLING_DEPOSIT`\n\t\t\n\t\t\n    6. Billing deposit from other\
    \ sources\n\n\n        `type: BILLING_DIRECT_DEPOSIT, BILLING_VA_DIRECT_DEPOSIT`\n\
    \t\t\n\t\t\n2. Money out flows\n    1. Instant payment\n\n\n        `type: simple\
    \ money out types`\n\t\t\t\t\n        `status: COMPLETED`\n\t\t\n\t\t\n    2.\
    \ Simple payment without fee/VAT\n\n\n        `type: CHARGEBACK_DEDUCTION, FRAUD_DEDUCTION,\
    \ LOAN_REPAYMENT, FOREX_DEDUCTION, BNPL_PARTNER_SETTLEMENT_DEBIT, WITHDRAWAL`\n\
    \n\n    3. Simple payment with fee/VAT\n\n\n        `type: ISSUING_FUNDING, BATCH_DISBURSEMENT,\
    \ CASH_DISBURSEMENT, DISBURSEMENT, REMITTANCE, REMITTANCE_PAYOUT, TAX_DISBURSEMENT`\n\
    \t\t\n\t\t\n    4. Billing withdraw to cash\n\n\n        `type: BILLING_WITHDRAWAL`\n\
    \t\t\n\t\t\n    4. Billing withdraw to other destinations\n\n\n        `type:\
    \ BILL_PAYMENT`\n\t\t\n\t\t\n3. Reversal flow\n\n    Some of transactions could\
    \ be reversed. See <a href=\"#section/Introduction/Reversible-non-reversible-transaction-types\"\
    >Reversible / non reversible transaction types</a> section of this document. To\
    \ reverse transaction you should call <a href=\"#operation/updateTransaction\"\
    >Update transaction (/api/transactions/:id)</a>  endpoint with the transaction\
    \ status `REVERSED`.\n\t\t\n4. Void/Cancellation Flow\n\n    Transaction in the\
    \ `PENDING_SETTLEMENT` status could be canceled. To do that you should call <a\
    \ href=\"#operation/updateTransaction\">Update transaction (/api/transactions/:id)</a>\
    \  endpoint with the transaction status `VOIDED`.\n\t\t\n\t\t\n5. Switcher flow\n\
    \n    Switchers are transactions that do not affect the customer balance. These\
    \ are transactions that goes directly to the customers’ account and simply passes\
    \ through Xendit. Therefore, it will not impact the customer balance and we will\
    \ only charge Fee and VAT. To create switcher flow you should set `is_switcher_payment`\
    \ field to `true`.\n\n\n\n\t\t\n## Instant/non instant settlement\n\nTransactions\
    \ can be performed instantly (instant settlement) or with delay (non instant settlement).\
    \  Some of the transaction types are only instantly processed, some of them support\
    \ both instant and non instant settlement and some of them have only non instant\
    \ settlement. If settlement is instant than balance will be changed instantly.\
    \ In opposite case the transaction status has to be set into PENDING_SETTLEMENT\
    \ and settlement date should be provided. \n\n1. Instant settlement Money In transaction\
    \ types\n\n    `DEPOSIT, BATCH_VA_PAYMENT, FOREX_DEPOSIT, IM_DEPOSIT, CARDLESS_CREDIT_PAYMENT,\
    \ ISSUING_FUNDING_REFUND, BNPL_PARTNER_SETTLEMENT_CREDIT, PROMO_FEE_CASHBACK,\
    \ PROMO_VAT_CASHBACK, REMITTANCE_VA_PAYMENT_CLAIM`\n\t\t\n2. Both instant and\
    \ non instant Money In transaction types\n\n    `DIRECT_DEBIT_PAYMENT, DIRECT_BANK_TRANSFER,\
    \ ACH_PAYMENT, RO_PAYMENT, EWALLET_PAYMENT, QR_CODE_PAYMENT, VA_PAYMENT, INVOICE,\
    \ PAYLATER_PAYMENT`\n\n3. Non Instant settlement Money In transaction types\n\n\
    \    `CREDIT_CARD_PAYMENT`\n\t\t\n4. Instant settlement Money Out transaction\
    \ types\n\n    `LOAN_REPAYMENT, FOREX_DEDUCTION, BILL_PAYMENT, ISSUING_FUNDING,\
    \ BNPL_PARTNER_SETTLEMENT_DEBIT, FRAUD_DEDUCTION`\n\n5. Both instant and non instant\
    \ settlement supported Money Out transaction types\n\n    `CHARGEBACK_DEDUCTION`\n\
    \n6. Non Instant settlement Money Out transaction types\n\n    All other money\
    \ out types are non instant settlement\n\n## Reversible / non reversible transaction\
    \ types\n\nSome transactions can be reversed. Here are the list of transaction\
    \ types that could be reversed: \n\n`CASH_DISBURSEMENT, DISBURSEMENT, BATCH_DISBURSEMENT,\
    \ REMITTANCE, REMITTANCE_PAYOUT, TAX_DISBURSEMENT, WITHDRAWAL, DEPOSIT, FOREX_DEPOSIT,\
    \ FOREX_DEDUCTION, VA_PAYMENT, BATCH_VA_PAYMENT, IM_REMITTANCE_VA_PAYMENT, IM_ESCROW_VA_PAYMENT,\
    \ IM_DEPOSIT, REMITTANCE_VA_PAYMENT, REMITTANCE_VA_PAYMENT_CLAIM, RO_PAYMENT,\
    \ CARDLESS_CREDIT_PAYMENT, PAYLATER_PAYMENT, INVOICE, QR_CODE_PAYMENT, CREDIT_CARD_PAYMENT,\
    \ EWALLET_PAYMENT, DIRECT_DEBIT_PAYMENT, DIRECT_BANK_TRANSFER, ACH_PAYMENT, CHARGEBACK_DEDUCTION,\
    \ FRAUD_DEDUCTION, LOAN_REPAYMENT, ISSUING_FUNDING, ISSUING_FUNDING_REFUND, BNPL_PARTNER_SETTLEMENT_DEBIT,\
    \ BNPL_PARTNER_SETTLEMENT_CREDIT, BILLING_DEPOSIT, BILLING_DIRECT_DEPOSIT, BILLING_VA_DIRECT_DEPOSIT,\
    \ BILLING_WITHDRAWAL, BILL_PAYMENT, PROMO_FEE_CASHBACK, PROMO_VAT_CASHBACK`\n\n\
    \    \n## How to create transaction\n\nAfter you created or already have the `BUSINESS_CASH`\
    \ ledger account ID (See <a href=\"#section/Introduction/Prerequisites\">Prerequisites</a>\
    \ section) and you know what transaction flows are going to be used  you can create\
    \ the new transaction using POST request to the  <a href=\"#operation/createTransaction\"\
    >Create a new transaction (/api/transactions)</a>  endpoint\n\n## How to update\
    \ transaction\n\nTo update transaction you should do  PATCH request to the  <a\
    \ href=\"#operation/updateTransaction\">Update transaction (/api/transactions/::id)</a>\
    \  endpoint\n\n\n"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Transaction Service V4 API
  version: 3.4.2
  x-logo:
    url: https://dashboard.xendit.co/assets/images/xendit-blue-logo.svg
servers:
- description: Xendit API Server
  url: https://api.xendit.co
paths:
  /balance:
    get:
      description: "Retrieves balance for your business, defaults to CASH type"
      operationId: getBalance
      parameters:
      - description: The selected balance type
        explode: true
        in: query
        name: account_type
        required: false
        schema:
          default: CASH
          enum:
          - CASH
          - HOLDING
          - TAX
          example: CASH
          type: string
        style: form
      - description: Currency for filter for customers with multi currency accounts
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: IDR
          type: string
        style: form
      - description: The sub-account user-id that you want to make this transaction
          for. This header is only used if you have access to xenPlatform. See xenPlatform
          for more information
        explode: false
        in: header
        name: for-user-id
        required: false
        schema:
          example: 5dbf20d7c8eb0c0896f811b6
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: "invalid input, object invalid"
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
          description: Errors
      summary: "Retrieves balances for a business, default to CASH type"
      tags:
      - balance
  /transactions:
    get:
      description: Get a list of all transactions based on filter and search parameters.
      operationId: getAllTransactions
      parameters:
      - description: The sub-account user-id that you want to make this transaction
          for. This header is only used if you have access to xenPlatform. See xenPlatform
          for more information
        explode: false
        in: header
        name: for-user-id
        required: false
        schema:
          example: 5dbf20d7c8eb0c0896f811b6
          type: string
        style: simple
      - description: Transaction types that will be included in the result. Default
          is to include all transaction types
        example:
        - DISBURSEMENT
        - PAYMENT
        explode: true
        in: query
        name: types
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionTypes'
          type: array
        style: form
      - description: Status of the transaction. Default is to include all status.
        example:
        - SUCCESS
        - PENDING
        explode: true
        in: query
        name: statuses
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionStatuses'
          type: array
        style: form
      - description: Payment channels in which the transaction is carried out. Default
          is to include all channels.
        example:
        - BANK
        - INVOICE
        explode: true
        in: query
        name: channel_categories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ChannelsCategories'
          type: array
        style: form
      - description: To filter the result for transactions with matching reference
          given (case sensitive)
        example: ref23232
        explode: true
        in: query
        name: reference_id
        required: false
        schema:
          type: string
        style: form
      - description: To filter the result for transactions with matching product_id
          (a.k.a payment_id) given (case sensitive)
        example: d290f1ee-6c54-4b01-90e6-d701748f0701
        explode: true
        in: query
        name: product_id
        required: false
        schema:
          type: string
        style: form
      - description: "Account identifier of transaction. The format will be different\
          \ from each channel. For example, on `BANK` channel it will be account number\
          \ and on `CARD` it will be masked card number."
        example: 123123123
        explode: true
        in: query
        name: account_identifier
        required: false
        schema:
          type: string
        style: form
      - description: Specific transaction amount to search for
        example: 100
        explode: true
        in: query
        name: amount
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: currency
        required: false
        schema:
          $ref: '#/components/schemas/Currency'
        style: form
      - description: Filter time of transaction by created date. If not specified
          will list all dates.
        explode: true
        in: query
        name: created
        required: false
        schema:
          $ref: '#/components/schemas/DateRangeFilter'
        style: deepObject
      - description: Filter time of transaction by updated date. If not specified
          will list all dates.
        explode: true
        in: query
        name: updated
        required: false
        schema:
          $ref: '#/components/schemas/DateRangeFilter'
        style: deepObject
      - description: number of items in the result per page. Another name for "results_per_page"
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 50
          type: number
        style: form
      - explode: true
        in: query
        name: after_id
        required: false
        schema:
          $ref: '#/components/schemas/TransactionId'
        style: form
      - explode: true
        in: query
        name: before_id
        required: false
        schema:
          $ref: '#/components/schemas/TransactionId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
          description: List of transaction object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: "invalid input, object invalid"
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
          description: Errors
      summary: Get a list of transactions
      tags:
      - transaction
  /transactions/{id}:
    get:
      description: Get single specific transaction by transaction id.
      operationId: getTransactionByID
      parameters:
      - description: The sub-account user-id that you want to make this transaction
          for. This header is only used if you have access to xenPlatform. See xenPlatform
          for more information
        explode: false
        in: header
        name: for-user-id
        required: false
        schema:
          example: 5dbf20d7c8eb0c0896f811b6
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/TransactionId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: "invalid input, object invalid"
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
          description: Errors
      summary: Get a transaction based on its id
      tags:
      - transaction
components:
  parameters:
    TransactionTypes:
      description: Transaction types that will be included in the result. Default
        is to include all transaction types
      example:
      - DISBURSEMENT
      - PAYMENT
      explode: true
      in: query
      name: types
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionTypes'
        type: array
      style: form
    TransactionStatuses:
      description: Status of the transaction. Default is to include all status.
      example:
      - SUCCESS
      - PENDING
      explode: true
      in: query
      name: statuses
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionStatuses'
        type: array
      style: form
    ChannelsCategories:
      description: Payment channels in which the transaction is carried out. Default
        is to include all channels.
      example:
      - BANK
      - INVOICE
      explode: true
      in: query
      name: channel_categories
      required: false
      schema:
        items:
          $ref: '#/components/schemas/ChannelsCategories'
        type: array
      style: form
    ReferenceId:
      description: To filter the result for transactions with matching reference given
        (case sensitive)
      example: ref23232
      explode: true
      in: query
      name: reference_id
      required: false
      schema:
        type: string
      style: form
    ProductId:
      description: To filter the result for transactions with matching product_id
        (a.k.a payment_id) given (case sensitive)
      example: d290f1ee-6c54-4b01-90e6-d701748f0701
      explode: true
      in: query
      name: product_id
      required: false
      schema:
        type: string
      style: form
    AccountIdentifier:
      description: "Account identifier of transaction. The format will be different\
        \ from each channel. For example, on `BANK` channel it will be account number\
        \ and on `CARD` it will be masked card number."
      example: 123123123
      explode: true
      in: query
      name: account_identifier
      required: false
      schema:
        type: string
      style: form
    Amount:
      description: Specific transaction amount to search for
      example: 100
      explode: true
      in: query
      name: amount
      required: false
      schema:
        type: number
      style: form
    Limit:
      description: number of items in the result per page. Another name for "results_per_page"
      example: 10
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        maximum: 50
        type: number
      style: form
  schemas:
    Balance:
      description: The balance remaining in your account
      example:
        balance: 123000.12
      properties:
        balance:
          example: 123000.12
          type: number
      required:
      - balance
      type: object
    LinkItem:
      example:
        method: GET
        rel: next
        href: /transactions?types=PAYMENT&statuses=SUCCESS&channel_categories=EWALLET&channel_categories=RETAIL_OUTLET&limit=2&after_id=txn_a765a3f0-34c0-41ee-8686-bca11835ebdc
      properties:
        href:
          description: "URI of target, this will be to the next link."
          example: /transactions?types=PAYMENT&statuses=SUCCESS&channel_categories=EWALLET&channel_categories=RETAIL_OUTLET&limit=2&after_id=txn_a765a3f0-34c0-41ee-8686-bca11835ebdc
          type: string
        rel:
          description: The relationship between source and target. The value will
            be `next`.
          example: next
          type: string
        method:
          description: "The HTTP method, the value will be `GET`."
          example: GET
          type: string
      required:
      - href
      - method
      - rel
      type: object
    TransactionsResponse:
      description: Returns an array of Transaction Objects. Returns empty array when
        there is no result.
      example:
        data:
        - amount: 150.21
          settlement_status: PENDING
          reference_id: My custom reference
          created: 2016-08-29T09:12:33.001Z
          fee:
            third_party_withholding_tax: 10
            value_added_tax: 1
            xendit_withholding_tax: 10
            xendit_fee: 10
            status: PENDING
          account_identifier: "123123123"
          channel_code: BCA
          type: null
          channel_category: INVOICE
          estimated_settlement_time: 2016-08-29T09:12:33.001Z
          cashflow: MONEY_IN
          product_id: d290f1ee-6c54-4b01-90e6-d701748f0851
          currency: IDR
          id: txn_438e4b61-7c4c-4dbb-bbba-94a896bff333
          business_id: 5fc9f5b246f820517e38c84d
          updated: 2016-08-29T09:12:33.001Z
          status: SUCCESS
        - amount: 150.21
          settlement_status: PENDING
          reference_id: My custom reference
          created: 2016-08-29T09:12:33.001Z
          fee:
            third_party_withholding_tax: 10
            value_added_tax: 1
            xendit_withholding_tax: 10
            xendit_fee: 10
            status: PENDING
          account_identifier: "123123123"
          channel_code: BCA
          type: null
          channel_category: INVOICE
          estimated_settlement_time: 2016-08-29T09:12:33.001Z
          cashflow: MONEY_IN
          product_id: d290f1ee-6c54-4b01-90e6-d701748f0851
          currency: IDR
          id: txn_438e4b61-7c4c-4dbb-bbba-94a896bff333
          business_id: 5fc9f5b246f820517e38c84d
          updated: 2016-08-29T09:12:33.001Z
          status: SUCCESS
        links:
        - method: GET
          rel: next
          href: /transactions?types=PAYMENT&statuses=SUCCESS&channel_categories=EWALLET&channel_categories=RETAIL_OUTLET&limit=2&after_id=txn_a765a3f0-34c0-41ee-8686-bca11835ebdc
        - method: GET
          rel: next
          href: /transactions?types=PAYMENT&statuses=SUCCESS&channel_categories=EWALLET&channel_categories=RETAIL_OUTLET&limit=2&after_id=txn_a765a3f0-34c0-41ee-8686-bca11835ebdc
        has_more: true
      properties:
        has_more:
          description: Indicates whether there are more items to be queried with `after_id`
            of the last item from the current result. Use the `links` to follow to
            the next result.
          type: boolean
        links:
          description: The links to the next page based on LinkItem if there is next
            result.
          items:
            $ref: '#/components/schemas/LinkItem'
          type: array
        data:
          items:
            $ref: '#/components/schemas/TransactionResponse'
          type: array
      required:
      - data
      - has_more
      type: object
    DateRangeFilter:
      properties:
        gte:
          description: Start time of transaction. If not specified will list all dates.
          example: 2020-08-29T17:00:00Z
          format: date-time
          type: string
        lte:
          description: End time of transaction. If not specified will list all dates.
          example: 2020-08-29T17:00:00Z
          format: date-time
          type: string
      type: object
    TransactionId:
      description: The unique id of a transaction. It will have `txn_` as prefix
      example: txn_438e4b61-7c4c-4dbb-bbba-94a896bff333
      pattern: "^txn_[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      type: string
    Currency:
      enum:
      - IDR
      - PHP
      - USD
      - JPY
      - VND
      - SGD
      - AED
      - AFN
      - ALL
      - AMD
      - ANG
      - AOA
      - ARS
      - AUD
      - AWG
      - AZN
      - BAM
      - BBD
      - BDT
      - BGN
      - BHD
      - BIF
      - BMD
      - BND
      - BOB
      - BRL
      - BSD
      - BTN
      - BWP
      - BYN
      - BZD
      - CAD
      - CDF
      - CHF
      - CLP
      - CNY
      - COP
      - CRC
      - CUC
      - CUP
      - CVE
      - CZK
      - DJF
      - DKK
      - DOP
      - DZD
      - EGP
      - ERN
      - ETB
      - EUR
      - FJD
      - FKP
      - GBP
      - GEL
      - GGP
      - GHS
      - GIP
      - GMD
      - GNF
      - GTQ
      - GYD
      - HKD
      - HNL
      - HRK
      - HTG
      - HUF
      - ILS
      - IMP
      - INR
      - IQD
      - IRR
      - ISK
      - JEP
      - JMD
      - JOD
      - KES
      - KGS
      - KHR
      - KMF
      - KPW
      - KRW
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LKR
      - LRD
      - LSL
      - LYD
      - MAD
      - MDL
      - MGA
      - MKD
      - MMK
      - MNT
      - MOP
      - MRU
      - MUR
      - MVR
      - MWK
      - MXN
      - MYR
      - MZN
      - NAD
      - NGN
      - NIO
      - NOK
      - NPR
      - NZD
      - OMR
      - PAB
      - PEN
      - PGK
      - PKR
      - PLN
      - PYG
      - QAR
      - RON
      - RSD
      - RUB
      - RWF
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SHP
      - SLL
      - SOS
      - SPL
      - SRD
      - STN
      - SVC
      - SYP
      - SZL
      - THB
      - TJS
      - TMT
      - TND
      - TOP
      - TRY
      - TTD
      - TVD
      - TWD
      - TZS
      - UAH
      - UGX
      - UYU
      - UZS
      - VEF
      - VUV
      - WST
      - XAF
      - XCD
      - XDR
      - XOF
      - XPF
      - YER
      - ZAR
      - ZMW
      - ZWD
      example: IDR
      type: string
    ValidationError:
      properties:
        status_code:
          example: 400
          type: number
        error:
          example: API_VALIDATION_ERROR
          type: string
        message:
          example: \"from\" is required. \"status\" is required. \"currency\" is required
          type: string
        validation:
          example:
            source: query
            keys:
            - from
            - status
            - currency
          nullable: true
          type: object
      required:
      - error
      - message
      - status_code
      type: object
    ServerError:
      properties:
        status_code:
          example: 500
          type: number
        error:
          example: Internal Server Error
          type: string
        message:
          example: An internal server error occurred
          type: string
      required:
      - error
      - message
      - status_code
      type: object
    TransactionTypes:
      enum:
      - BATCH_DISBURSEMENT
      - DISBURSEMENT
      - PAYMENT
      - REMITTANCE
      - REMITTANCE_PAYOUT
      - REMITTANCE_COLLECTION
      - TRANSFER
      - PLATFORM_FEE
      - REFUND
      - CASHBACK
      - TOPUP
      - WITHDRAWAL
      - OTHER
      example: DISBURSEMENT
      type: string
    ChannelsCategories:
      enum:
      - BANK
      - CARDLESS_CREDIT
      - PAYLATER
      - CARDS
      - CASH
      - DIRECT_DEBIT
      - EWALLET
      - INVOICE
      - QR_CODE
      - RETAIL_OUTLET
      - VIRTUAL_ACCOUNT
      - XENPLATFORM
      - DIRECT_BANK_TRANSFER
      - OTHER
      example: INVOICE
      type: string
    TransactionResponse:
      example:
        amount: 150.21
        settlement_status: PENDING
        reference_id: My custom reference
        created: 2016-08-29T09:12:33.001Z
        fee:
          third_party_withholding_tax: 10
          value_added_tax: 1
          xendit_withholding_tax: 10
          xendit_fee: 10
          status: PENDING
        account_identifier: "123123123"
        channel_code: BCA
        type: null
        channel_category: INVOICE
        estimated_settlement_time: 2016-08-29T09:12:33.001Z
        cashflow: MONEY_IN
        product_id: d290f1ee-6c54-4b01-90e6-d701748f0851
        currency: IDR
        id: txn_438e4b61-7c4c-4dbb-bbba-94a896bff333
        business_id: 5fc9f5b246f820517e38c84d
        updated: 2016-08-29T09:12:33.001Z
        status: SUCCESS
      properties:
        id:
          description: The unique id of a transaction. It will have `txn_` as prefix
          example: txn_438e4b61-7c4c-4dbb-bbba-94a896bff333
          pattern: "^txn_[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
        product_id:
          description: The product_id of the transaction. Product id will have a different
            prefix for each product. You can use this id to match the transaction
            from this API to each product API.
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          type: string
        type:
          $ref: '#/components/schemas/TransactionResponse_type'
        status:
          $ref: '#/components/schemas/TransactionStatuses'
        channel_category:
          $ref: '#/components/schemas/ChannelsCategories'
        channel_code:
          description: "The channel of the transaction that is used. See [channel\
            \ codes](https://docs.xendit.co/xendisburse/channel-codes) for the list\
            \ of available per channel categories."
          example: BCA
          nullable: true
          type: string
        account_identifier:
          description: Account identifier of transaction. The format will be different
            from each channel.
          example: "123123123"
          nullable: true
          type: string
        reference_id:
          description: customer supplied reference/external_id
          example: My custom reference
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          description: The transaction amount. The number of decimal places will be
            different for each currency according to ISO 4217.
          example: 150.21
          type: number
        cashflow:
          description: "Representing whether the transaction is money in or money\
            \ out For transfer, the transfer out side it will shows up as money out\
            \ and on transfer in side in will shows up as money-in. Available values\
            \ are `MONEY_IN` for money in and `MONEY_OUT` for money out."
          enum:
          - MONEY_IN
          - MONEY_OUT
          type: string
        settlement_status:
          description: The settlement status of the transaction. `PENDING` - Transaction
            amount has not been settled to merchant's balance. `SETTLED` - Transaction
            has been settled to merchant's balance
          enum:
          - PENDING
          - SETTLED
          nullable: true
          type: string
        estimated_settlement_time:
          description: "Estimated settlement time will only apply to money-in transactions.\
            \ For money-out transaction, the value will be `NULL`. Estimated settlement\
            \ time in which transaction amount will be settled to merchant's balance."
          example: 2016-08-29T09:12:33.001Z
          format: date-time
          nullable: true
          type: string
        business_id:
          description: The id of business where this transaction belong to
          example: 5fc9f5b246f820517e38c84d
          type: string
        fee:
          $ref: '#/components/schemas/FeeResponse'
        created:
          description: Transaction created timestamp (UTC+0)
          example: 2016-08-29T09:12:33.001Z
          format: date-time
          type: string
        updated:
          description: Transaction updated timestamp (UTC+0)
          example: 2016-08-29T09:12:33.001Z
          format: date-time
          type: string
      required:
      - account_identifier
      - amount
      - business_id
      - cashflow
      - channel_category
      - channel_code
      - created
      - currency
      - fee
      - id
      - product_id
      - reference_id
      - status
      - type
      - updated
      type: object
    FeeResponse:
      example:
        third_party_withholding_tax: 10
        value_added_tax: 1
        xendit_withholding_tax: 10
        xendit_fee: 10
        status: PENDING
      properties:
        xendit_fee:
          description: Amount of the Xendit fee for this transaction.
          example: 10
          type: number
        value_added_tax:
          description: Amount of the VAT for this transaction.
          example: 1
          type: number
        xendit_withholding_tax:
          description: "Amount of the Xendit Withholding Tax for this transaction\
            \ if applicable. See [Tax Documentation](https://docs.xendit.co/fees-and-vat#vat)\
            \ for more information."
          example: 10
          type: number
        third_party_withholding_tax:
          description: |
            Amount of the 3rd Party Withholding Tax for this transaction if applicable. 3rd party example: Bank
          example: 10
          type: number
        status:
          enum:
          - PENDING
          - COMPLETED
          - CANCELED
          - REVERSED
          type: string
      required:
      - value_added_tax
      - xendit_fee
      type: object
    TransactionStatuses:
      enum:
      - SUCCESS
      - PENDING
      - FAILED
      - REVERSED
      - VOIDED
      example: SUCCESS
      type: string
    TransactionResponse_type:
      anyOf:
      - $ref: '#/components/schemas/TransactionTypes'
      - type: string
      description: The type of the transactions.
